default_platform(:android)
fastlane_require 'dotenv'

platform :android do
########################################################################
# Environment
########################################################################
Dotenv.load('~/.wcandroid-env.default')
ENV[GHHELPER_REPO="woocommerce/woocommerce-android"]
ENV["PROJECT_NAME"]="WooCommerce"
ENV["PROJECT_ROOT_FOLDER"]="./"
ENV["validate_translations"]="buildVanillaRelease"

SUPPORTED_LOCALES = [
  { glotpress: "en", google_play: "en-US", emulator: "en", promo_config: {}},
  { glotpress: "ar", google_play: "ar", emulator: "ar", promo_config: {}},
  { glotpress: "de", google_play: "de-DE", emulator: "de", promo_config: {} },
  { glotpress: "es", google_play: "es-ES", emulator: "es", promo_config: {} },
  { glotpress: "fr", google_play: "fr-FR", emulator: "fr", promo_config: {} },
  { glotpress: "he", google_play: "iw-IL", emulator: "he", promo_config: {} },
  { glotpress: "id", google_play: "id", emulator: "id", promo_config: {} },
  { glotpress: "it", google_play: "it-IT", emulator: "it", promo_config: {} },
  { glotpress: "ja", google_play: "ja-JP", emulator: "ja", promo_config: {} },
  { glotpress: "ko", google_play: "ko-KR", emulator: "ko", promo_config: {} },
  { glotpress: "nl", google_play: "nl-NL", emulator: "nl", promo_config: {} },
  { glotpress: "pt-br", google_play: "pt-BR", emulator: "pt-BR", promo_config: {} },
  { glotpress: "ru", google_play: "ru-RU", emulator: "ru", promo_config: {} },
  { glotpress: "sv", google_play: "sv-SE", emulator: "sv", promo_config: {} },
  { glotpress: "tr", google_play: "tr-TR", emulator: "tr", promo_config: {} },
  { glotpress: "zh-cn", google_play: "zh-CN", emulator: "zh-CN", promo_config: {} },
  { glotpress: "zh-tw", google_play: "zh-TW", emulator: "zh-TW", promo_config: {} },
].freeze

########################################################################
# Release Lanes
########################################################################  
  #####################################################################################
  # code_freeze
  # -----------------------------------------------------------------------------------
  # This lane executes the steps planned on code freeze
  # -----------------------------------------------------------------------------------
  # Usage:
  # bundle exec fastlane code_freeze codefreeze_version:<version> [update_release_branch_version:<update flag>] [skip_confirm:<skip confirm>]
  #
  # Example:
  # bundle exec fastlane code_freeze 
  # bundle exec fastlane code_freeze skip_confirm:true
  #####################################################################################
  desc "Creates a new release branch from the current develop"
  lane :code_freeze do | options |
    old_version = android_codefreeze_prechecks(options)
   
    android_bump_version_release()
    new_version = android_get_app_version()
    android_update_release_notes(new_version: new_version)
    setbranchprotection(repository:GHHELPER_REPO, branch: "release/#{new_version}")
    setfrozentag(repository:GHHELPER_REPO, milestone: new_version)
    
    localize_libs()
    android_tag_build()
    get_prs_list(repository:GHHELPER_REPO, start_tag:"release/#{old_version}", report_path:"#{File.expand_path('~')}/wcandroid_prs_list_#{old_version}_#{new_version}.txt")
  end

#####################################################################################
# update_appstore_strings 
# -----------------------------------------------------------------------------------
# This lane gets the data from the txt files in the WooCommerce/metadata/ folder
# and updates the .pot file that is then picked by GlotPress for translations.
# -----------------------------------------------------------------------------------
# Usage:
# fastlane update_appstore_strings version:<version>
#
# Example:
# fastlane update_appstore_strings version:1.1
#####################################################################################
desc "Updates the PlayStoreStrings.pot file"
lane :update_appstore_strings do |options| 
  prj_folder = Dir.pwd + "/.."

  files = {
    release_note: prj_folder + "/WooCommerce/metadata/release_notes.txt",
    play_store_promo: prj_folder + "/WooCommerce/metadata/short_description.txt",
    play_store_desc: prj_folder + "/WooCommerce/metadata/full_description.txt",
    play_store_app_title: prj_folder + "/WooCommerce/metadata/title.txt",
    play_store_screenshot_1: prj_folder + "/WooCommerce/metadata/promo_screenshot_1.txt",
    play_store_screenshot_1_b: prj_folder + "/WooCommerce/metadata/promo_screenshot_1_b.txt",
    play_store_screenshot_2: prj_folder + "/WooCommerce/metadata/promo_screenshot_2.txt",
    play_store_screenshot_3: prj_folder + "/WooCommerce/metadata/promo_screenshot_3.txt",
    play_store_screenshot_4: prj_folder + "/WooCommerce/metadata/promo_screenshot_4.txt",
    play_store_screenshot_5: prj_folder + "/WooCommerce/metadata/promo_screenshot_5.txt",
    play_store_screenshot_6: prj_folder + "/WooCommerce/metadata/promo_screenshot_6.txt",
    play_store_screenshot_7: prj_folder + "/WooCommerce/metadata/promo_screenshot_7.txt",
    play_store_screenshot_8: prj_folder + "/WooCommerce/metadata/promo_screenshot_8.txt"
  }

  android_update_metadata_source(po_file_path: prj_folder + "/WooCommerce/metadata/PlayStoreStrings.pot", 
    source_files: files, 
    release_version: options[:version])
end 

  #####################################################################################
  # new_beta_release
  # -----------------------------------------------------------------------------------
  # This lane updates the release branch for a new beta release. It will update the
  # current release branch by default. If you want to update a different branch
  # (i.e. hotfix branch) pass the related version with the 'base_version' param
  # (example: base_version:10.6.1 will work on the 10.6.1 branch)
  # -----------------------------------------------------------------------------------
  # Usage:
  # bundle exec fastlane new_beta_release [skip_confirm:<skip confirm>] [base_version:<version>]
  #
  # Example:
  # bundle exec fastlane new_beta_release
  # bundle exec fastlane new_beta_release skip_confirm:true
  # bundle exec fastlane new_beta_release base_version:10.6.1
  #####################################################################################
  desc "Updates a release branch for a new beta release"
  lane :new_beta_release do | options |
    android_betabuild_prechecks(options)
    android_bump_version_beta()
    android_tag_build()
  end

  #####################################################################################
  # new_hotfix_release
  # -----------------------------------------------------------------------------------
  # This lane updates the release branch for a new hotix release. 
  # -----------------------------------------------------------------------------------
  # Usage:
  # bundle exec fastlane new_hotfix_release [skip_confirm:<skip confirm>] [version:<version>]
  #
  # Example:
  # bundle exec fastlane new_hotfix_release version:10.6.1
  # bundle exec fastlane new_hotfix_release skip_confirm:true version:10.6.1
  #####################################################################################
  desc "Creates a new hotfix branch from the given tag"
  lane :new_hotfix_release do | options |
    prev_ver = android_hotfix_prechecks(version_name: options[:version_name], skip_confirm: options[:skip_confirm])
    android_bump_version_hotfix(previous_version_name: prev_ver, version_name: options[:version_name], version_code: options[:version_code])
    android_tag_build(tag_alpha: false)
  end
  
  #####################################################################################
  # finalize_release
  # -----------------------------------------------------------------------------------
  # This lane finalize a release: updates store metadata and runs the release checks
  # -----------------------------------------------------------------------------------
  # Usage:
  # bundle exec fastlane finalize_release [skip_confirm:<skip confirm>] 
  #
  # Example:
  # bundle exec fastlane finalize_release 
  # bundle exec fastlane finalize_release skip_confirm:true 
  #####################################################################################
  desc "Updates store metadata and runs the release checks"
  lane :finalize_release do | options |
    android_finalize_prechecks(options)
    hotfix = android_current_branch_is_hotfix
    android_update_metadata(options) unless hotfix
    android_bump_version_final_release() unless hotfix
    version = android_get_release_version() unless hotfix
    download_metadata_strings(version: version["name"], build_number: version["code"]) unless hotfix
    android_tag_build(tag_alpha: false)

    # Wrap up
    removebranchprotection(repository:GHHELPER_REPO, branch: "release/#{version["name"]}")
    setfrozentag(repository:GHHELPER_REPO, milestone: version["name"], freeze: false)
    close_milestone(repository:GHHELPER_REPO, milestone: version["name"])
    create_new_milestone(repository:GHHELPER_REPO)
  end

  #####################################################################################
  # build_release
  # -----------------------------------------------------------------------------------
  # This lane builds the final release of the app and uploads it 
  # -----------------------------------------------------------------------------------
  # Usage:
  # bundle exec fastlane build_release [skip_confirm:<skip confirm>]
  #
  # Example:
  # bundle exec fastlane build_release 
  # bundle exec fastlane build_release skip_confirm:true 
  #####################################################################################
  desc "Builds and uploads release for distribution"
  lane :build_and_upload_release do | options |
    android_build_prechecks(skip_confirm: options[:skip_confirm], 
      alpha: false,
      beta: false,
      final: true)
    android_build_preflight()
    
    # Create the file names
    version=android_get_release_version()
    build_bundle(version: version, flavor:"Vanilla")

    project_root = File.dirname(File.expand_path(File.dirname(__FILE__)))
    aab_file_path = File.join(project_root, "artifacts", "wcandroid-#{ version["name"] }.aab")

    UI.error("Unable to find a build artifact at #{aab_file_path}") unless File.exist? aab_file_path

    upload_to_play_store(
      package_name: 'com.woocommerce.android',
      aab: aab_file_path,
      track: 'production',
      release_status: 'draft',
      skip_upload_metadata: true,
      skip_upload_changelogs: true,
      skip_upload_images: true,
      skip_upload_screenshots: true,
      json_key: './google-upload-credentials.json',
    )
  end

  #####################################################################################
  # build_and_upload_beta
  # -----------------------------------------------------------------------------------
  # This lane builds the app for external beta distribution, and uploads the build
  # to the beta channel (but does not release it).
  # -----------------------------------------------------------------------------------
  # Usage:
  # bundle exec fastlane build_and_upload_beta [skip_confirm:<skip confirm>]
  #
  # Example:
  # bundle exec fastlane build_and_upload_beta 
  # bundle exec fastlane build_and_upload_beta skip_confirm:true 
  #####################################################################################
  desc "Builds and uploads a new beta build to Google Play (without releasing it)"
  lane :build_and_upload_beta do | options |
    android_build_prechecks(skip_confirm: options[:skip_confirm], alpha: false, beta: true, final: false) unless (options[:skip_prechecks])
    android_build_preflight() unless (options[:skip_prechecks])

    # Create the file names
    version=android_get_release_version()
    build_bundle(version: version, flavor:"Vanilla")

    project_root = File.dirname(File.expand_path(File.dirname(__FILE__)))
    aab_file_path = File.join(project_root, "artifacts", "wcandroid-#{ version["name"] }.aab")

    UI.error("Unable to find a build artifact at #{aab_file_path}") unless File.exist? aab_file_path

    upload_to_play_store(
      package_name: 'com.woocommerce.android',
      aab: aab_file_path,
      track: 'beta',
      release_status: 'draft',
      skip_upload_metadata: true,
      skip_upload_changelogs: true,
      skip_upload_images: true,
      skip_upload_screenshots: true,
      json_key: './google-upload-credentials.json',
    )
  end
  
#####################################################################################
# localize_libs 
# -----------------------------------------------------------------------------------
# This lane gets the data from the dependencies and updates the main strings.xml file
# -----------------------------------------------------------------------------------
# Usage:
# fastlane localize_libs 
#
# Example:
# fastlane localize_libs 
#####################################################################################
desc "Merge libraries strings files into the main app one"
lane :localize_libs do | options |
  main_strings_path = "./WooCommerce/src/main/res/values/strings.xml"
  libraries_strings_path = [
    {library: "Login Library", strings_path: "./libs/login/WordPressLoginFlow/src/main/res/values/strings.xml", exclusions: ["default_web_client_id"]}
  ]

  if (an_localize_libs(app_strings_path: main_strings_path, libs_strings_path: libraries_strings_path)) then
    UI.important("Your #{main_strings_path} has changed.")
    UI.input("Please, review the changes, commit them and press return to continue.")
  end
end

  #####################################################################################
  # download_metadata_string 
  # -----------------------------------------------------------------------------------
  # This lane downloads the translated metadata (release notes,
  # app store strings, title, etc.) from GlotPress and updates the local files
  # -----------------------------------------------------------------------------------
  # Usage:
  # fastlane download_metadata_string build_number:<build_number> version:<version>
  #
  # Example:
  # fastlane download_metadata_string build_number:573 version:10.3
  #####################################################################################
  desc "Downloads translated metadata from GlotPress"
  lane :download_metadata_strings do |options| 
    values = options[:version].split('.')
    files = {
      "release_note_#{values[0].to_s.rjust(2, "0")}#{values[1]}" => {desc: "changelogs/#{options[:build_number]}.txt", max_size: 0},
      play_store_promo: {desc:"short_description.txt", max_size: 80},
      play_store_desc: {desc:"full_description.txt", max_size: 0},
      play_store_app_title: {desc:"title.txt", max_size: 50}
    }

    delete_old_changelogs(build: options[:build_number])
    download_path=Dir.pwd + "/metadata/android"
    gp_downloadmetadata(project_url: "https://translate.wordpress.com/projects/woocommerce/woocommerce-android/release-notes/", 
      target_files: files, 
      locales: SUPPORTED_LOCALES.map {| hsh | [ hsh[:glotpress], hsh[:google_play] ]},
      source_locale: "en-US",
      download_path: download_path)
    
    android_create_xml_release_notes(download_path: download_path, build_number: "#{options[:build_number]}", locales: SUPPORTED_LOCALES.map {| hsh | [ hsh[:glotpress], hsh[:google_play] ]})
    add_us_release_notes(relese_notes_path: download_path + "/release_notes.xml", version_name: options[:version])
    sh("git add #{download_path} && (git diff-index --quiet HEAD || git commit -m \"Update metadata translations for #{options[:version]}\") && git push")
  end 

  #####################################################################################
  # screenshots
  # -----------------------------------------------------------------------------------
  # This lane creates screenshots
  # -----------------------------------------------------------------------------------
  # Usage:
  # fastlane screenshots
  #
  # Example:
  # fastlane screenshots
  #####################################################################################
  desc "Create raw screenshots"
  lane :screenshots do |options|
    # Build the app and test targets
    gradle(task: "assembleVanillaDebug assembleVanillaDebugAndroidTest")

    if options[:locales]
      locales = options[:locales].split(',')
    else
      locales = SUPPORTED_LOCALES.
        # Depending on how automated this is, possibly on whether we wipe the
        # emulator before running or not, the zh-CN locale might break due to
        # Pinwin Keyboard wanting contacts access. If that's the case, you can
        # skip it by uncommeting the following line.
        #reject { |locale| locale[:glotpress] == 'zh-cn' }.
        map { |locale|  locale[:emulator] }
    end

    rebuild_screenshot_devices

    UI.message("Attempting screenshots for locales: #{locales}")

    screenshot_devices = [
      {
        screenshot_type: 'phone',
        device_name: 'Pixel_2_XL_API_29',
        device_serial: options[:phone_serial],
      }
    ]

    screenshot_options = {
      output_directory: screenshots_directory,
      app_package_name: "com.woocommerce.android",
      app_apk_path: "WooCommerce/build/outputs/apk/vanilla/debug/WooCommerce-vanilla-debug.apk",
      tests_apk_path: "WooCommerce/build/outputs/apk/androidTest/vanilla/debug/WooCommerce-vanilla-debug-androidTest.apk",
      # Because the screenshot tests are together with other UI tests, we need
      # to specify to run only them and not all of the others.
      use_tests_in_classes: "com.woocommerce.android.screenshots.ScreenshotTest",
      reinstall_app: false,
      # By default, don't clear previous because we differentiate between light
      # and dark mode
      clear_previous_screenshots: options.fetch(:clear_previous_screenshots, false),
      # Needs to be root to save screenshots consistently
      use_adb_root: true,
      locales: locales,
      use_timestamp_suffix: false,
      test_instrumentation_runner: "com.woocommerce.android.WooCommerceTestRunner",
      # Don't care about the .html summary
      skip_open_summary: true,
      launch_arguments: [
        "disableMocks true",
      ]
    }

    # Originally, we used this custom action, which is excellent because it
    # manages the Emulator state etc. But, I can't get it to work with
    # scripting a change between light and dark mode.
    #
    # This is just a debug flag to roll back to the previous implementation.
    no_dark_mode = false
    if no_dark_mode
      take_android_emulator_screenshots(devices: screenshot_devices, screenshot_options: screenshot_options)
      exit 1
    end
    #
    # So, for the moment, in the interest of getting the screenshots done, I'm
    # using a more manual approach...

    # These would be handled by the custom lane
    #
    # This is inherently brittle, there's no guarantee we'll have an emulator
    # on port 5554 open
    emulator_serial = "emulator-5554"

    skip_ui_modes_toggling = options.fetch(:skip_ui_modes, true)
    adb_toggle_dark_mode(true, emulator_serial) unless skip_ui_modes_toggling

    screengrab(
      screenshot_options.merge(
        {
          specific_device: emulator_serial
        }
      )
    )

    # If asked to try both UI modes, continue
    unless skip_ui_modes_toggling
      adb_toggle_dark_mode(false, emulator_serial)

      screengrab(
        screenshot_options.merge(
          {
            specific_device: emulator_serial,
            # if true, will fail with:
            # [hh:mm:ss]: $ /Users/gio/Library/Android/sdk/platform-tools/adb -s emulator-5554 root
            # restarting adbd as root
            # timeout expired while waiting for device
            # [hh:mm:ss]: Exit status: 1
            use_adb_root: false,
          }
        )
      )
    end
  end

  desc 'Compose screenshots'
  lane :create_promo_screenshots do |options|
    # This value is defined in style.css. It would be good if there was a way
    # to make it parametric, so that if we update the CSS we don't risk this
    # getting out of sync.
    font_name = "ProximaNova-Bold.otf"
    repo_font_path = File.join(Dir.pwd, "playstoreres/assets/#{font_name}")

    install_font(repo_font_path)

    promo_screenshots(
      orig_folder: options.fetch(:source, screenshots_directory),
      metadata_folder: File.join(Dir.pwd, "metadata"),
      output_folder: File.join(Dir.pwd, "promo_sceenshots"),
      force: options.fetch(:force, true)
    )
  end

  #####################################################################################
  # rebuild_screenshot_devices
  # -----------------------------------------------------------------------------------
  # This lane rebuilds all of the emulators used for generating screenshots. Beware –
  # running this action will overwrite the following emulators:
  #     - Pixel 2 XL API 28
  # It will not overwrite any other devices.
  # -----------------------------------------------------------------------------------
  # Usage:
  # fastlane rebuild_screenshot_devices
  #
  # Example:
  # fastlane rebuild_screenshot_devices
  #####################################################################################
  desc "Rebuild screenshot devices"
  lane :rebuild_screenshot_devices do |options|

    emulators = [
        Dir.pwd + "/emulators/Pixel_2_XL_API_29.ini",
    ]

    emulators.each do |emulator_configuration|
        sh("helpers/copy-device.sh '#{emulator_configuration}'")
    end
  end

########################################################################
# Helper Lanes
########################################################################  
desc "Get a list of pull request from `start_tag` to the current state"
lane :get_pullrequests_list do | options |
  get_prs_list(repository:GHHELPER_REPO, start_tag:"#{options[:start_tag]}", report_path:"#{File.expand_path('~')}/wcandroid_prs_list.txt")
end

  #####################################################################################
  # build_bundle
  # -----------------------------------------------------------------------------------
  # This lane builds an app bundle
  # -----------------------------------------------------------------------------------
  # Usage:
  # bundle exec fastlane build_bundle [skip_confirm:<skip confirm>]
  #####################################################################################
  desc "Builds an app bundle"
  lane :build_bundle do | options |
    # Create the file names
    version=options[:version]
    name="wcandroid-#{version["name"]}.aab"
    apk_name="wcandroid-#{version["name"]}-universal.apk"
    aab_file="WooCommerce-vanilla-release.aab"
    output_dir="WooCommerce/build/outputs/bundle/"
    build_dir="artifacts/"

    # Build
    Dir.chdir(".") do
      UI.message("Cleaning branch...")
      gradle(task: "clean")
      UI.message("Running lint...")
      gradle(task: "lint", flavor: options[:flavor], build_type: "Release")
      UI.message("Building #{version["name"]} / #{version["code"]} - #{aab_file}...")
      gradle(task: "bundle", flavor: options[:flavor], build_type: "Release")
    end

    Dir.chdir("..") do
      sh("mkdir -p #{build_dir} && cp -v #{output_dir}#{options[:flavor]}Release/#{aab_file} #{build_dir}#{name}")
      UI.message("Bundle ready: #{name}")
      extract_universal_apk(bundle_path:"#{build_dir}#{name}", apk_path:"#{build_dir}#{apk_name}")
    end
    "#{build_dir}#{name}"
  end

  #####################################################################################
  # Private lanes
  #####################################################################################
  private_lane :delete_old_changelogs do | options |
    Dir.glob("./metadata/android/*/").each do | folder |
      Dir["#{folder}changelogs/*"].each do | file |
        File.delete(file) if Integer(File.basename(file, ".*")) < Integer(options[:build]) rescue puts "Cannot delete file #{file}"
      end
    end
  end

  private_lane :add_us_release_notes do | options |
    en_release_notes_path  = Dir.pwd + "/.." + "/WooCommerce/metadata/release_notes.txt"
    File.open(options[:relese_notes_path], "a") { |f| 
      f.puts("<en-US>")
      f.puts("#{options[:version_name]}:")
      f.puts(File.open(en_release_notes_path).read)
      f.puts("</en-US>")
    }
  end

  private_lane :extract_universal_apk do | options |
    bundle_path=options[:bundle_path]
    apk_path=options[:apk_path]
    temp_dir = Dir.mktmpdir()

    command = "source ./tools/gradle-functions.sh"
    command << "&& bundletool build-apks --bundle=\"#{bundle_path}\" \\
    --output=\"#{temp_dir}/universal.apks\" \\
    --mode=universal \\
    --ks=\"$(get_gradle_property gradle.properties storeFile)\" \\
    --ks-pass=\"pass:$(get_gradle_property gradle.properties storePassword)\" \\
    --ks-key-alias=\"$(get_gradle_property gradle.properties keyAlias)\" \\
    --key-pass=\"pass:$(get_gradle_property gradle.properties keyPassword)\""
    sh(command)

    sh("unzip \"#{temp_dir}/universal.apks\" -d \"#{temp_dir}\"")
    FileUtils.cp_r("#{temp_dir}/universal.apk", "#{apk_path}", remove_destination: true)  
    FileUtils.rm_rf("#{temp_dir}")
  end

end

def screenshots_directory
  File.join(Dir.pwd, "screenshots")
end

def install_font(source_font_path)
  unless File.exists?(source_font_path)
    UI.abort_with_message!("Could not find font to install at #{source_font_path}")
  end

  font_name = File.basename(source_font_path)

  user_font_directory = File.join(Dir.home, "Library/Fonts")
  user_font_path = File.join(user_font_directory, font_name)

  if File.exists?(user_font_path)
    UI.message("Custom font #{font_name} is already installed locally.")
  else
    UI.message("Installing #{font_name} at #{user_font_path}...")

    `mkdir -p #{user_font_directory}`
    `cp #{source_font_path} #{user_font_path}`

    UI.success("#{font_name} installed at #{user_font_path}.")
  end
end

def adb_toggle_dark_mode(enable, emulator_serial)
  value = enable ? "2" : "1"

  # This runs successfully, but they don't toggle the dark mode as the do
  # when run manually...
  #
  # Why?!?!
=begin
      adb(
        command: "shell settings put secure ui_night_mode #{value}",
        serial: emulator_serial
      )
      # I also tried with `system("adb shell...")` instead, same result
=end
  if UI.interactive?
    UI.message("I cannot toggle dark mode manually, so you'll have to do it for me.")

    UI.message("Please run the following command in a new window:")
    UI.message("\tadb shell settings put secure ui_night_mode #{value}")

    unless UI.confirm("Did it run successfully?")
      UI.abort_with_message!("Sorry. All commands need to succeed to continue. Please try again.")
    end
  else
    UI.abort_with_message!("This needs to run in an interactive session")
  end
  UI.command("adb shell settings put secure ui_night_mode #{value}")

  UI.message("Rebooting the emulator for the UI mode change to take place.")
  UI.message("This might take a while...")
  adb(command: "reboot", serial: emulator_serial)

  max_attempts = 100
  sleep_time_s = 1
  attempt = 0

  UI.message("Making sure emulator is online. This might take a while too...")

  begin
    attempt += 1
    result = adb(command: "devices")
    UI.verbose("Attempt #{attempt}, result #{result}")
    sleep(sleep_time_s)
  end while (attempt < max_attempts) && (result.gsub("devices", "").include?("device") == false)
end
